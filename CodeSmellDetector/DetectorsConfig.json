{
    "folder": "D:\\Thesis\\CodeSmellDetector\\Smells",
    "detectors": [
        {
            "name": "Too many parameters",
            "file": "Method_argc.js",
            "description": "Detects excessive method parameter count",
            "args": {
                "max_argc": {
                    "formal_name": "Maximum method arguments",
                    "type": "range",
                    "range": [
                        6,
                        10
                    ],
                    "limits": [
                        2,
                        15
                    ]
                }
            },
            "hidden": false
        },
        {
            "name": "Too many function literals",
            "file": "Method_literals.js",
            "description": "Detects excessive method literal count",
            "args": {
                "max_literals": {
                    "formal_name": "Maximum method literals",
                    "type": "range",
                    "range": [
                        1,
                        30
                    ],
                    "limits": [
                        1,
                        50
                    ]
                }
            },
            "hidden": false
        },
        {
            "name": "Too many locals",
            "file": "Method_locals.js",
            "description": "Detects excessive method local variable declarations",
            "args": {
                "max_locals": {
                    "formal_name": "Maximum method locals",
                    "type": "range",
                    "range": [
                        10,
                        24
                    ],
                    "limits": [
                        1,
                        30
                    ]
                }
            },
            "hidden": false
        },
        {
            "name": "Long function",
            "file": "Long_function.js",
            "description": "Detects methods with too many statemets or too many lines",
            "args": {
                "max_statements": {
                    "formal_name": "Maximum method statement count",
                    "type": "range",
                    "range": [
                        60,
                        161
                    ],
                    "limits": [
                        20,
                        200
                    ]
                },
                "max_lines": {
                    "formal_name": "Maximum Method line count",
                    "type": "range",
                    "range": [
                        70,
                        120
                    ],
                    "limits": [
                        5,
                        200
                    ]
                }
            },
            "hidden": false
        },
        {
            "name": "Cyclomatic complexity",
            "file": "Cyclo_complex.js",
            "description": "Detects methods with excessive branches (if, switch, while, for, conintue, break, return)",
            "args": {
                "max_loops": {
                    "formal_name": "Maximum method loops",
                    "type": "range",
                    "range": [
                        6,
                        12
                    ],
                    "limits": [
                        1,
                        30
                    ]
                },
                "max_branches": {
                    "formal_name": "Maximum method branching statements",
                    "type": "range",
                    "range": [
                        14,
                        20
                    ],
                    "limits": [
                        1,
                        60
                    ]
                }
            },
            "hidden": false
        },
        {
            "name": "Excessively long identifier",
            "file": "Long_identifier.js",
            "description": "Detects identifiers with too many characters",
            "args": {
                "max_id_len": {
                    "formal_name": "Maximum length of an identifier",
                    "type": "range",
                    "range": [
                        25,
                        45
                    ],
                    "limits": [
                        5,
                        100
                    ]
                }
            },
            "hidden": false
        },
        {
            "name": "Excessively long line of code",
            "file": "God_line.js",
            "description": "Detects too long lines of un-commented code",
            "args": {
                "max_line_len": {
                    "formal_name": "Maximum length of a line",
                    "type": "range",
                    "range": [
                        100,
                        150
                    ],
                    "limits": [
                        40,
                        200
                    ]
                }
            },
            "hidden": false
        },
        {
            "name": "Naming conventions",
            "file": "Name_conventions.js",
            "description": "Detects identifiers that do not follow naming conventions",
            "args": {
                "dict0": {
                    "UpperCamelCase": "([A-Z][a-z0-9]*)((\\d)|([A-Z0-9][a-z0-9]+))*([A-Z])?",
                    "lowerCamelCase": "[a-z]+((\\d)|([A-Z0-9][a-z0-9]+))*([A-Z])?",
                    "snake_case": "([a-z]*_?[a-z]*)*",
                    "any": "[\\s\\S]*",
                    "custom0": "regex4"
                },
                "class_names": {
                    "formal_name": "Class names",
                    "val": "UpperCamelCase",
                    "type": "enum",
                    "dict": "dict0"
                },
                "method_names": {
                    "formal_name": "Method names",
                    "val": "UpperCamelCase",
                    "type": "enum",
                    "dict": "dict0"
                },
                "var_names": {
                    "formal_name": "Variable names",
                    "val": "any",
                    "type": "enum",
                    "dict": "dict0"
                },
                "use_id_len_as_score": false,
                "max_chars_ignored": {
                    "formal_name": "Maximum characters ignored",
                    "type": "range",
                    "range": [
                        0,
                        32
                    ],
                    "limits": [
                        0,
                        60
                    ]
                }
            },
            "hidden": false
        },
        {
            "name": "Nested scopes",
            "file": "Nested_scopes.js",
            "description": "Detects methods that nest scopes too deep",
            "args": {
                "max_nested_scopes": {
                    "formal_name": "Maximum depth of nested blocks",
                    "type": "range",
                    "range": [
                        3,
                        7
                    ],
                    "limits": [
                        2,
                        12
                    ]
                }
            },
            "hidden": false
        },
        {
            "name": "Circular dependency",
            "file": "Dependency_circle.js",
            "description": "Detects circlular dependency between structures",
            "args": {
                "max_circle_len": {
                    "formal_name": "Maximum circle length",
                    "type": "range",
                    "range": [
                        2,
                        6
                    ],
                    "limits": [
                        1,
                        20
                    ]
                }
            },
            "hidden": false
        },
        {
            "name": "Large Class",
            "file": "Large_class.js",
            "description": "Detects structures with too many methods or fields",
            "args": {
                "max_methods": {
                    "formal_name": "Maximum count of methods",
                    "type": "range",
                    "range": [
                        8,
                        29
                    ],
                    "limits": [
                        2,
                        40
                    ]
                },
                "max_fields": {
                    "formal_name": "Maximum count of fields",
                    "type": "range",
                    "range": [
                        6,
                        17
                    ],
                    "limits": [
                        2,
                        40
                    ]
                },
                "public_only": {
                    "formal_name": "Public only",
                    "val": true,
                    "type": "boolean"
                }
            },
            "hidden": false
        },
        {
            "name": "Large File",
            "file": "Large_file.js",
            "description": "Detects code files with too many lines",
            "args": {
                "max_src_lines": {
                    "formal_name": "Maximum source file lines",
                    "type": "range",
                    "range": [
                        619,
                        1200
                    ],
                    "limits": [
                        200,
                        1200
                    ]
                },
                "max_header_lines": {
                    "formal_name": "Maximum header file lines",
                    "type": "range",
                    "range": [
                        200,
                        550
                    ],
                    "limits": [
                        100,
                        800
                    ]
                }
            },
            "hidden": false
        },
        {
            "name": "Inappropriate Intimacy",
            "file": "Inappropriate_intimacy.js",
            "description": "@argument max_member_expr: Max count of member expr from one class to any other class.",
            "args": {
                "max_member_expr": {
                    "formal_name": "Maximum member expressions",
                    "type": "range",
                    "range": [
                        50,
                        120
                    ],
                    "limits": [
                        20,
                        200
                    ]
                }
            },
            "hidden": false
        },
        {
            "name": "Non virtual base destructor",
            "file": "Virtual_destructor.js",
            "description": "Flags destructors of base classes that are not virtual.",
            "args": {}
        },
        {
            "name": "Redundant protected access",
            "file": "Redundant_protected.js",
            "description": "Detects protected member functions or variables declared in classes that are not inherited from.",
            "args": {
                "max_unneeded_protected": {
                    "formal_name": "Maximum unnecessary protected",
                    "type": "range",
                    "range": [
                        1,
                        20
                    ],
                    "limits": [
                        1,
                        20
                    ]
                }
            },
            "hidden": false
        },
        {
            "name": "Excessive function overloading",
            "file": "Function_overload.js",
            "description": "Detects functions that are overloaded too many times.",
            "args": {
                "max_overload": {
                    "formal_name": "Maximum overloads of a function",
                    "type": "range",
                    "range": [
                        8,
                        14
                    ],
                    "limits": [
                        2,
                        20
                    ]
                }
            },
            "hidden": false
        },
        {
            "name": "Many dependencies",
            "file": "Dependency_count.js",
            "description": "Detects structures that directly depend upon too many other structures. Indirect dependencies are not counted.",
            "args": {
                "max_direct_dependencies": {
                    "formal_name": "Maximum direct dependencies",
                    "type": "range",
                    "range": [
                        8,
                        16
                    ],
                    "limits": [
                        4,
                        40
                    ]
                }
            },
            "hidden": false
        }
    ]
}