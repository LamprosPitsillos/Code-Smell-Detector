{
	"folder": "D:\\Thesis\\CodeSmellDetector\\Smells",
	"smells": 
	[
		{
			"name": "Too many parameters",
			"file": "Method_argc.js",
			"description": "",
			"args": 
			{
				"max_argc":
				{
					"min": 4,
					"max": 7
				}
			}
		},
		{
			"name": "Too many function literals",
			"file": "Method_literals.js",
			"description": "",
			"args": 
			{
				"max_literals":
				{
					"min": 7,
					"max": 12
				}
			}
		},
		{
			"name": "Long function",
			"file": "Long_function.js",
			"description": "",
			"args": 
			{
				"max_statements": 
				{
					"min": 70,
					"max": 120
				},
				"max_lines":
				{
					"min": 40,
					"max": 80
				}
			}
		},
		{
			"name": "Cyclomatic complexity",
			"file": "Cyclo_complex.js",
			"description": "",
			"args":
			{
				"max_loops": 
				{
					"min": 5,
					"max": 10
				},
				"max_branches":
				{
					"min": 15,
					"max" : 25
				}
			}
		},
		{
			"name": "Excessively long identifier",
			"file": "Long_identifier.js",
			"description": "",
			"args":
			{
				"max_id_len":
				{
					"min": 17,
					"max": 25
				}
			}
		},
		{
			"name": "Excessively long line of code (God Line)",
			"file": "God_line.js",
			"description": "",
			"args":
			{
				"max_line_len":
				{
					"min": 90,
					"max": 125
				}
			}
		},
		{
			"name": "Naming conventions",
			"file": "Name_conventions.js",
			"description": "",
			"args":
			{
				"options":
				{
					"UpperCamelCase": "([A-Z][a-z0-9]*)((\\d)|([A-Z0-9][a-z0-9]+))*([A-Z])?",
					"lowerCamelCase": "[a-z]+((\\d)|([A-Z0-9][a-z0-9]+))*([A-Z])?",
					"snake_case": "([a-z]*_?[a-z]*)*",
					"none": "*",
					"custom0": "regex4"
				},
				"class_names": "UpperCamelCase",
				"method_names": "UpperCamelCase",
				"var_names": "snake_case",
				"use_id_len_as_score": false,
				"max_chars_ignored":
				{
					"min": 24,
					"max": 34
				}
			}
		},
		{
			"name": "Nested scopes",
			"file": "Nested_scopes.js",
			"description": "",
			"args":
			{
				"max_nested_scopes":
				{
					"min": 3,
					"max": 6
				}
			}
		},
		{
			"name": "Circular dependency",
			"file": "Dependency_circle.js",
			"description": "",
			"args":
			{
				"max_circle_len":
				{
					"min": 2,
					"max": 5
				}
			}
		},
		{
			"name": "Large Class",
			"file": "Large_class.js",
			"description": "",
			"args":
			{
				"max_methods":
				{
					"min": 15,
					"max": 30
				},
				"max_fields":
				{
					"min": 15,
					"max": 30
				},
				"public_only": false
			}
		},
		{
			"name": "Large File",
			"file": "Large_file.js",
			"description": "",
			"args":
			{
				"max_src_lines":
				{
					"min": 1000,
					"max": 1700
				},
				"max_header_lines":
				{
					"min": 400,
					"max": 800
				}
			}
		},
		{
			"name": "Inappropriate Intimacy",
			"file": "Inappropriate_intimacy.js",
			"description": "@argument max_member_expr: Max count of member expr from one class to any other class.",
			"args":
			{
				"max_member_expr":
				{
					"min": 2,
					"max": 4
				}
			}
		},
        {
            "name": "Non virtual base destructor",
            "file": "Virtual_destructor.js",
            "description": "Flags destructors of base classes that are not virtual.",
            "args":{}
        },
        {
            "name": "Redundant protected access",
            "file": "Redundant_protected.js",
            "description": "Detects protected member functions or variables declared in classes that are not inherited from.",
            "args":
            {
                "max_unneeded_protected":
                {
                    "min": 1,
                    "max": 5
                }
            }
        }
	]
}